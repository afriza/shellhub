/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeviceInfo Device's info
type DeviceInfo struct {
	// Device's OS name
	Id *string `json:"id,omitempty"`
	// Device's OS pretty name
	PrettyName *string `json:"pretty_name,omitempty"`
	// Device's OS version
	Version *string `json:"version,omitempty"`
	// Device's OS arch
	Arch *string `json:"arch,omitempty"`
	// Device's OS platform
	Platform *string `json:"platform,omitempty"`
}

// NewDeviceInfo instantiates a new DeviceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceInfo() *DeviceInfo {
	this := DeviceInfo{}
	return &this
}

// NewDeviceInfoWithDefaults instantiates a new DeviceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceInfoWithDefaults() *DeviceInfo {
	this := DeviceInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceInfo) SetId(v string) {
	o.Id = &v
}

// GetPrettyName returns the PrettyName field value if set, zero value otherwise.
func (o *DeviceInfo) GetPrettyName() string {
	if o == nil || o.PrettyName == nil {
		var ret string
		return ret
	}
	return *o.PrettyName
}

// GetPrettyNameOk returns a tuple with the PrettyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetPrettyNameOk() (*string, bool) {
	if o == nil || o.PrettyName == nil {
		return nil, false
	}
	return o.PrettyName, true
}

// HasPrettyName returns a boolean if a field has been set.
func (o *DeviceInfo) HasPrettyName() bool {
	if o != nil && o.PrettyName != nil {
		return true
	}

	return false
}

// SetPrettyName gets a reference to the given string and assigns it to the PrettyName field.
func (o *DeviceInfo) SetPrettyName(v string) {
	o.PrettyName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DeviceInfo) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DeviceInfo) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DeviceInfo) SetVersion(v string) {
	o.Version = &v
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *DeviceInfo) GetArch() string {
	if o == nil || o.Arch == nil {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetArchOk() (*string, bool) {
	if o == nil || o.Arch == nil {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *DeviceInfo) HasArch() bool {
	if o != nil && o.Arch != nil {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *DeviceInfo) SetArch(v string) {
	o.Arch = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *DeviceInfo) GetPlatform() string {
	if o == nil || o.Platform == nil {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetPlatformOk() (*string, bool) {
	if o == nil || o.Platform == nil {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *DeviceInfo) HasPlatform() bool {
	if o != nil && o.Platform != nil {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *DeviceInfo) SetPlatform(v string) {
	o.Platform = &v
}

func (o DeviceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PrettyName != nil {
		toSerialize["pretty_name"] = o.PrettyName
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Arch != nil {
		toSerialize["arch"] = o.Arch
	}
	if o.Platform != nil {
		toSerialize["platform"] = o.Platform
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceInfo struct {
	value *DeviceInfo
	isSet bool
}

func (v NullableDeviceInfo) Get() *DeviceInfo {
	return v.value
}

func (v *NullableDeviceInfo) Set(val *DeviceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceInfo(val *DeviceInfo) *NullableDeviceInfo {
	return &NullableDeviceInfo{value: val, isSet: true}
}

func (v NullableDeviceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


