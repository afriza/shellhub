/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PublicKeyFilter - Public key's filter rule.   The `filter`` rule defines how if the public key is valid to a device.  - When `hostname` object is set, the public key will be used in a device what matches with hostname. - When `tags` object is set, it matches the device what contains at least one of that tags.  
type PublicKeyFilter struct {
	PublicKeyFilterOneOf *PublicKeyFilterOneOf
	PublicKeyFilterOneOf1 *PublicKeyFilterOneOf1
}

// PublicKeyFilterOneOfAsPublicKeyFilter is a convenience function that returns PublicKeyFilterOneOf wrapped in PublicKeyFilter
func PublicKeyFilterOneOfAsPublicKeyFilter(v *PublicKeyFilterOneOf) PublicKeyFilter {
	return PublicKeyFilter{
		PublicKeyFilterOneOf: v,
	}
}

// PublicKeyFilterOneOf1AsPublicKeyFilter is a convenience function that returns PublicKeyFilterOneOf1 wrapped in PublicKeyFilter
func PublicKeyFilterOneOf1AsPublicKeyFilter(v *PublicKeyFilterOneOf1) PublicKeyFilter {
	return PublicKeyFilter{
		PublicKeyFilterOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PublicKeyFilter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PublicKeyFilterOneOf
	err = newStrictDecoder(data).Decode(&dst.PublicKeyFilterOneOf)
	if err == nil {
		jsonPublicKeyFilterOneOf, _ := json.Marshal(dst.PublicKeyFilterOneOf)
		if string(jsonPublicKeyFilterOneOf) == "{}" { // empty struct
			dst.PublicKeyFilterOneOf = nil
		} else {
			match++
		}
	} else {
		dst.PublicKeyFilterOneOf = nil
	}

	// try to unmarshal data into PublicKeyFilterOneOf1
	err = newStrictDecoder(data).Decode(&dst.PublicKeyFilterOneOf1)
	if err == nil {
		jsonPublicKeyFilterOneOf1, _ := json.Marshal(dst.PublicKeyFilterOneOf1)
		if string(jsonPublicKeyFilterOneOf1) == "{}" { // empty struct
			dst.PublicKeyFilterOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.PublicKeyFilterOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PublicKeyFilterOneOf = nil
		dst.PublicKeyFilterOneOf1 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PublicKeyFilter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PublicKeyFilter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PublicKeyFilter) MarshalJSON() ([]byte, error) {
	if src.PublicKeyFilterOneOf != nil {
		return json.Marshal(&src.PublicKeyFilterOneOf)
	}

	if src.PublicKeyFilterOneOf1 != nil {
		return json.Marshal(&src.PublicKeyFilterOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PublicKeyFilter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PublicKeyFilterOneOf != nil {
		return obj.PublicKeyFilterOneOf
	}

	if obj.PublicKeyFilterOneOf1 != nil {
		return obj.PublicKeyFilterOneOf1
	}

	// all schemas are nil
	return nil
}

type NullablePublicKeyFilter struct {
	value *PublicKeyFilter
	isSet bool
}

func (v NullablePublicKeyFilter) Get() *PublicKeyFilter {
	return v.value
}

func (v *NullablePublicKeyFilter) Set(val *PublicKeyFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicKeyFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicKeyFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicKeyFilter(val *PublicKeyFilter) *NullablePublicKeyFilter {
	return &NullablePublicKeyFilter{value: val, isSet: true}
}

func (v NullablePublicKeyFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicKeyFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


