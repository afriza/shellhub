/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateUserPasswordRequest struct for UpdateUserPasswordRequest
type UpdateUserPasswordRequest struct {
	// User current password
	CurrentPassword *string `json:"current_password,omitempty"`
	// User new password
	NewPassword *string `json:"new_password,omitempty"`
}

// NewUpdateUserPasswordRequest instantiates a new UpdateUserPasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserPasswordRequest() *UpdateUserPasswordRequest {
	this := UpdateUserPasswordRequest{}
	return &this
}

// NewUpdateUserPasswordRequestWithDefaults instantiates a new UpdateUserPasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserPasswordRequestWithDefaults() *UpdateUserPasswordRequest {
	this := UpdateUserPasswordRequest{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise.
func (o *UpdateUserPasswordRequest) GetCurrentPassword() string {
	if o == nil || o.CurrentPassword == nil {
		var ret string
		return ret
	}
	return *o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPasswordRequest) GetCurrentPasswordOk() (*string, bool) {
	if o == nil || o.CurrentPassword == nil {
		return nil, false
	}
	return o.CurrentPassword, true
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *UpdateUserPasswordRequest) HasCurrentPassword() bool {
	if o != nil && o.CurrentPassword != nil {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given string and assigns it to the CurrentPassword field.
func (o *UpdateUserPasswordRequest) SetCurrentPassword(v string) {
	o.CurrentPassword = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *UpdateUserPasswordRequest) GetNewPassword() string {
	if o == nil || o.NewPassword == nil {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPasswordRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil || o.NewPassword == nil {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UpdateUserPasswordRequest) HasNewPassword() bool {
	if o != nil && o.NewPassword != nil {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *UpdateUserPasswordRequest) SetNewPassword(v string) {
	o.NewPassword = &v
}

func (o UpdateUserPasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentPassword != nil {
		toSerialize["current_password"] = o.CurrentPassword
	}
	if o.NewPassword != nil {
		toSerialize["new_password"] = o.NewPassword
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateUserPasswordRequest struct {
	value *UpdateUserPasswordRequest
	isSet bool
}

func (v NullableUpdateUserPasswordRequest) Get() *UpdateUserPasswordRequest {
	return v.value
}

func (v *NullableUpdateUserPasswordRequest) Set(val *UpdateUserPasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserPasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserPasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserPasswordRequest(val *UpdateUserPasswordRequest) *NullableUpdateUserPasswordRequest {
	return &NullableUpdateUserPasswordRequest{value: val, isSet: true}
}

func (v NullableUpdateUserPasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserPasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


