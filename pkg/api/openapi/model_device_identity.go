/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeviceIdentity Device's identity
type DeviceIdentity struct {
	// Device's MAC
	Mac *string `json:"mac,omitempty"`
}

// NewDeviceIdentity instantiates a new DeviceIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceIdentity() *DeviceIdentity {
	this := DeviceIdentity{}
	return &this
}

// NewDeviceIdentityWithDefaults instantiates a new DeviceIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceIdentityWithDefaults() *DeviceIdentity {
	this := DeviceIdentity{}
	return &this
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *DeviceIdentity) GetMac() string {
	if o == nil || o.Mac == nil {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceIdentity) GetMacOk() (*string, bool) {
	if o == nil || o.Mac == nil {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *DeviceIdentity) HasMac() bool {
	if o != nil && o.Mac != nil {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *DeviceIdentity) SetMac(v string) {
	o.Mac = &v
}

func (o DeviceIdentity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Mac != nil {
		toSerialize["mac"] = o.Mac
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceIdentity struct {
	value *DeviceIdentity
	isSet bool
}

func (v NullableDeviceIdentity) Get() *DeviceIdentity {
	return v.value
}

func (v *NullableDeviceIdentity) Set(val *DeviceIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceIdentity(val *DeviceIdentity) *NullableDeviceIdentity {
	return &NullableDeviceIdentity{value: val, isSet: true}
}

func (v NullableDeviceIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


