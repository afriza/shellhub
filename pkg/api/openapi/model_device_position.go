/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DevicePosition Device's geolocation position
type DevicePosition struct {
	// Device's latitude position
	Latitude *float32 `json:"latitude,omitempty"`
	// Device's longitude position
	Longitude *float32 `json:"longitude,omitempty"`
}

// NewDevicePosition instantiates a new DevicePosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicePosition() *DevicePosition {
	this := DevicePosition{}
	return &this
}

// NewDevicePositionWithDefaults instantiates a new DevicePosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicePositionWithDefaults() *DevicePosition {
	this := DevicePosition{}
	return &this
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *DevicePosition) GetLatitude() float32 {
	if o == nil || o.Latitude == nil {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePosition) GetLatitudeOk() (*float32, bool) {
	if o == nil || o.Latitude == nil {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *DevicePosition) HasLatitude() bool {
	if o != nil && o.Latitude != nil {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *DevicePosition) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *DevicePosition) GetLongitude() float32 {
	if o == nil || o.Longitude == nil {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePosition) GetLongitudeOk() (*float32, bool) {
	if o == nil || o.Longitude == nil {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *DevicePosition) HasLongitude() bool {
	if o != nil && o.Longitude != nil {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *DevicePosition) SetLongitude(v float32) {
	o.Longitude = &v
}

func (o DevicePosition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Latitude != nil {
		toSerialize["latitude"] = o.Latitude
	}
	if o.Longitude != nil {
		toSerialize["longitude"] = o.Longitude
	}
	return json.Marshal(toSerialize)
}

type NullableDevicePosition struct {
	value *DevicePosition
	isSet bool
}

func (v NullableDevicePosition) Get() *DevicePosition {
	return v.value
}

func (v *NullableDevicePosition) Set(val *DevicePosition) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicePosition) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicePosition(val *DevicePosition) *NullableDevicePosition {
	return &NullableDevicePosition{value: val, isSet: true}
}

func (v NullableDevicePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


