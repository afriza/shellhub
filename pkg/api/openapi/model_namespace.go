/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Namespace struct for Namespace
type Namespace struct {
	// Namespace's name
	Name *string `json:"name,omitempty"`
	// User's ID.
	Owner *string `json:"owner,omitempty"`
	// Namespace's tenant ID
	TenantId *string `json:"tenant_id,omitempty"`
	// Namespace's members
	Members []NamespaceMembersInner `json:"members,omitempty"`
	Settings *NamespaceSettings `json:"settings,omitempty"`
	// Namespace's max device numbers
	MaxDevices *int32 `json:"max_devices,omitempty"`
	// Namespace's total devices
	DeviceCount *int32 `json:"device_count,omitempty"`
	// Namespace's creation date
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Namespace's billing
	Billing map[string]interface{} `json:"billing,omitempty"`
}

// NewNamespace instantiates a new Namespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespace() *Namespace {
	this := Namespace{}
	var maxDevices int32 = 3
	this.MaxDevices = &maxDevices
	return &this
}

// NewNamespaceWithDefaults instantiates a new Namespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceWithDefaults() *Namespace {
	this := Namespace{}
	var maxDevices int32 = 3
	this.MaxDevices = &maxDevices
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Namespace) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Namespace) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Namespace) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Namespace) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Namespace) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Namespace) SetOwner(v string) {
	o.Owner = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *Namespace) GetTenantId() string {
	if o == nil || o.TenantId == nil {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetTenantIdOk() (*string, bool) {
	if o == nil || o.TenantId == nil {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *Namespace) HasTenantId() bool {
	if o != nil && o.TenantId != nil {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *Namespace) SetTenantId(v string) {
	o.TenantId = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Namespace) GetMembers() []NamespaceMembersInner {
	if o == nil || o.Members == nil {
		var ret []NamespaceMembersInner
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetMembersOk() ([]NamespaceMembersInner, bool) {
	if o == nil || o.Members == nil {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Namespace) HasMembers() bool {
	if o != nil && o.Members != nil {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []NamespaceMembersInner and assigns it to the Members field.
func (o *Namespace) SetMembers(v []NamespaceMembersInner) {
	o.Members = v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *Namespace) GetSettings() NamespaceSettings {
	if o == nil || o.Settings == nil {
		var ret NamespaceSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetSettingsOk() (*NamespaceSettings, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *Namespace) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given NamespaceSettings and assigns it to the Settings field.
func (o *Namespace) SetSettings(v NamespaceSettings) {
	o.Settings = &v
}

// GetMaxDevices returns the MaxDevices field value if set, zero value otherwise.
func (o *Namespace) GetMaxDevices() int32 {
	if o == nil || o.MaxDevices == nil {
		var ret int32
		return ret
	}
	return *o.MaxDevices
}

// GetMaxDevicesOk returns a tuple with the MaxDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetMaxDevicesOk() (*int32, bool) {
	if o == nil || o.MaxDevices == nil {
		return nil, false
	}
	return o.MaxDevices, true
}

// HasMaxDevices returns a boolean if a field has been set.
func (o *Namespace) HasMaxDevices() bool {
	if o != nil && o.MaxDevices != nil {
		return true
	}

	return false
}

// SetMaxDevices gets a reference to the given int32 and assigns it to the MaxDevices field.
func (o *Namespace) SetMaxDevices(v int32) {
	o.MaxDevices = &v
}

// GetDeviceCount returns the DeviceCount field value if set, zero value otherwise.
func (o *Namespace) GetDeviceCount() int32 {
	if o == nil || o.DeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.DeviceCount
}

// GetDeviceCountOk returns a tuple with the DeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetDeviceCountOk() (*int32, bool) {
	if o == nil || o.DeviceCount == nil {
		return nil, false
	}
	return o.DeviceCount, true
}

// HasDeviceCount returns a boolean if a field has been set.
func (o *Namespace) HasDeviceCount() bool {
	if o != nil && o.DeviceCount != nil {
		return true
	}

	return false
}

// SetDeviceCount gets a reference to the given int32 and assigns it to the DeviceCount field.
func (o *Namespace) SetDeviceCount(v int32) {
	o.DeviceCount = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Namespace) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Namespace) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Namespace) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetBilling returns the Billing field value if set, zero value otherwise.
func (o *Namespace) GetBilling() map[string]interface{} {
	if o == nil || o.Billing == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Billing
}

// GetBillingOk returns a tuple with the Billing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetBillingOk() (map[string]interface{}, bool) {
	if o == nil || o.Billing == nil {
		return nil, false
	}
	return o.Billing, true
}

// HasBilling returns a boolean if a field has been set.
func (o *Namespace) HasBilling() bool {
	if o != nil && o.Billing != nil {
		return true
	}

	return false
}

// SetBilling gets a reference to the given map[string]interface{} and assigns it to the Billing field.
func (o *Namespace) SetBilling(v map[string]interface{}) {
	o.Billing = v
}

func (o Namespace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.TenantId != nil {
		toSerialize["tenant_id"] = o.TenantId
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	if o.MaxDevices != nil {
		toSerialize["max_devices"] = o.MaxDevices
	}
	if o.DeviceCount != nil {
		toSerialize["device_count"] = o.DeviceCount
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Billing != nil {
		toSerialize["billing"] = o.Billing
	}
	return json.Marshal(toSerialize)
}

type NullableNamespace struct {
	value *Namespace
	isSet bool
}

func (v NullableNamespace) Get() *Namespace {
	return v.value
}

func (v *NullableNamespace) Set(val *Namespace) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespace(val *Namespace) *NullableNamespace {
	return &NullableNamespace{value: val, isSet: true}
}

func (v NullableNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


