/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateUserDataRequest struct for UpdateUserDataRequest
type UpdateUserDataRequest struct {
	// User's name.
	Name string `json:"name"`
	// User's e-mail.
	Email string `json:"email"`
	// User's username.
	Username string `json:"username"`
}

// NewUpdateUserDataRequest instantiates a new UpdateUserDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserDataRequest(name string, email string, username string) *UpdateUserDataRequest {
	this := UpdateUserDataRequest{}
	this.Name = name
	this.Email = email
	this.Username = username
	return &this
}

// NewUpdateUserDataRequestWithDefaults instantiates a new UpdateUserDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserDataRequestWithDefaults() *UpdateUserDataRequest {
	this := UpdateUserDataRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateUserDataRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateUserDataRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateUserDataRequest) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *UpdateUserDataRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UpdateUserDataRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UpdateUserDataRequest) SetEmail(v string) {
	o.Email = v
}

// GetUsername returns the Username field value
func (o *UpdateUserDataRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UpdateUserDataRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UpdateUserDataRequest) SetUsername(v string) {
	o.Username = v
}

func (o UpdateUserDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateUserDataRequest struct {
	value *UpdateUserDataRequest
	isSet bool
}

func (v NullableUpdateUserDataRequest) Get() *UpdateUserDataRequest {
	return v.value
}

func (v *NullableUpdateUserDataRequest) Set(val *UpdateUserDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserDataRequest(val *UpdateUserDataRequest) *NullableUpdateUserDataRequest {
	return &NullableUpdateUserDataRequest{value: val, isSet: true}
}

func (v NullableUpdateUserDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


