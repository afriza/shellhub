/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PostAuthDevice200Response struct for PostAuthDevice200Response
type PostAuthDevice200Response struct {
	// Device's UID
	Uid *string `json:"uid,omitempty"`
	// Device's token
	Token *string `json:"token,omitempty"`
	// Device's name   By default, the name is the device's MAC address when it just added. 
	Name *string `json:"name,omitempty"`
	// Device's namespace name
	Namespace *string `json:"namespace,omitempty"`
}

// NewPostAuthDevice200Response instantiates a new PostAuthDevice200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostAuthDevice200Response() *PostAuthDevice200Response {
	this := PostAuthDevice200Response{}
	return &this
}

// NewPostAuthDevice200ResponseWithDefaults instantiates a new PostAuthDevice200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostAuthDevice200ResponseWithDefaults() *PostAuthDevice200Response {
	this := PostAuthDevice200Response{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *PostAuthDevice200Response) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAuthDevice200Response) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *PostAuthDevice200Response) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *PostAuthDevice200Response) SetUid(v string) {
	o.Uid = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PostAuthDevice200Response) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAuthDevice200Response) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PostAuthDevice200Response) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PostAuthDevice200Response) SetToken(v string) {
	o.Token = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PostAuthDevice200Response) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAuthDevice200Response) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PostAuthDevice200Response) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PostAuthDevice200Response) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *PostAuthDevice200Response) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAuthDevice200Response) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *PostAuthDevice200Response) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *PostAuthDevice200Response) SetNamespace(v string) {
	o.Namespace = &v
}

func (o PostAuthDevice200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	return json.Marshal(toSerialize)
}

type NullablePostAuthDevice200Response struct {
	value *PostAuthDevice200Response
	isSet bool
}

func (v NullablePostAuthDevice200Response) Get() *PostAuthDevice200Response {
	return v.value
}

func (v *NullablePostAuthDevice200Response) Set(val *PostAuthDevice200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAuthDevice200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAuthDevice200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAuthDevice200Response(val *PostAuthDevice200Response) *NullablePostAuthDevice200Response {
	return &NullablePostAuthDevice200Response{value: val, isSet: true}
}

func (v NullablePostAuthDevice200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAuthDevice200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


