/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NamespaceSettings Namespace's settings
type NamespaceSettings struct {
	// Namespace's session record status
	SessionRecord *bool `json:"session_record,omitempty"`
}

// NewNamespaceSettings instantiates a new NamespaceSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceSettings() *NamespaceSettings {
	this := NamespaceSettings{}
	var sessionRecord bool = true
	this.SessionRecord = &sessionRecord
	return &this
}

// NewNamespaceSettingsWithDefaults instantiates a new NamespaceSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceSettingsWithDefaults() *NamespaceSettings {
	this := NamespaceSettings{}
	var sessionRecord bool = true
	this.SessionRecord = &sessionRecord
	return &this
}

// GetSessionRecord returns the SessionRecord field value if set, zero value otherwise.
func (o *NamespaceSettings) GetSessionRecord() bool {
	if o == nil || o.SessionRecord == nil {
		var ret bool
		return ret
	}
	return *o.SessionRecord
}

// GetSessionRecordOk returns a tuple with the SessionRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceSettings) GetSessionRecordOk() (*bool, bool) {
	if o == nil || o.SessionRecord == nil {
		return nil, false
	}
	return o.SessionRecord, true
}

// HasSessionRecord returns a boolean if a field has been set.
func (o *NamespaceSettings) HasSessionRecord() bool {
	if o != nil && o.SessionRecord != nil {
		return true
	}

	return false
}

// SetSessionRecord gets a reference to the given bool and assigns it to the SessionRecord field.
func (o *NamespaceSettings) SetSessionRecord(v bool) {
	o.SessionRecord = &v
}

func (o NamespaceSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SessionRecord != nil {
		toSerialize["session_record"] = o.SessionRecord
	}
	return json.Marshal(toSerialize)
}

type NullableNamespaceSettings struct {
	value *NamespaceSettings
	isSet bool
}

func (v NullableNamespaceSettings) Get() *NamespaceSettings {
	return v.value
}

func (v *NullableNamespaceSettings) Set(val *NamespaceSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceSettings(val *NamespaceSettings) *NullableNamespaceSettings {
	return &NullableNamespaceSettings{value: val, isSet: true}
}

func (v NullableNamespaceSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


