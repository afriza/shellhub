/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NamespaceMemberRole Namespace's member role
type NamespaceMemberRole string

// List of namespaceMemberRole
const (
	ADMINISTRATOR NamespaceMemberRole = "administrator"
	OPERATOR NamespaceMemberRole = "operator"
	OBSERVER NamespaceMemberRole = "observer"
	OWNER NamespaceMemberRole = "owner"
)

// All allowed values of NamespaceMemberRole enum
var AllowedNamespaceMemberRoleEnumValues = []NamespaceMemberRole{
	"administrator",
	"operator",
	"observer",
	"owner",
}

func (v *NamespaceMemberRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NamespaceMemberRole(value)
	for _, existing := range AllowedNamespaceMemberRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NamespaceMemberRole", value)
}

// NewNamespaceMemberRoleFromValue returns a pointer to a valid NamespaceMemberRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNamespaceMemberRoleFromValue(v string) (*NamespaceMemberRole, error) {
	ev := NamespaceMemberRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NamespaceMemberRole: valid values are %v", v, AllowedNamespaceMemberRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NamespaceMemberRole) IsValid() bool {
	for _, existing := range AllowedNamespaceMemberRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to namespaceMemberRole value
func (v NamespaceMemberRole) Ptr() *NamespaceMemberRole {
	return &v
}

type NullableNamespaceMemberRole struct {
	value *NamespaceMemberRole
	isSet bool
}

func (v NullableNamespaceMemberRole) Get() *NamespaceMemberRole {
	return v.value
}

func (v *NullableNamespaceMemberRole) Set(val *NamespaceMemberRole) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceMemberRole) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceMemberRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceMemberRole(val *NamespaceMemberRole) *NullableNamespaceMemberRole {
	return &NullableNamespaceMemberRole{value: val, isSet: true}
}

func (v NullableNamespaceMemberRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceMemberRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

