/*
ShellHub Community

ShellHub Community documentation.  It documents all routes provided by ShellHub Community.   NOTICE: THE API IS NOT STABLE YET; ERROR AND INCONSISTENCIES MAY OCCUR. 

API version: 0.1.0
Contact: contato@ossystems.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateNamespaceMemberRequest struct for UpdateNamespaceMemberRequest
type UpdateNamespaceMemberRequest struct {
	Role *NamespaceMemberRole `json:"role,omitempty"`
}

// NewUpdateNamespaceMemberRequest instantiates a new UpdateNamespaceMemberRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNamespaceMemberRequest() *UpdateNamespaceMemberRequest {
	this := UpdateNamespaceMemberRequest{}
	return &this
}

// NewUpdateNamespaceMemberRequestWithDefaults instantiates a new UpdateNamespaceMemberRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNamespaceMemberRequestWithDefaults() *UpdateNamespaceMemberRequest {
	this := UpdateNamespaceMemberRequest{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *UpdateNamespaceMemberRequest) GetRole() NamespaceMemberRole {
	if o == nil || o.Role == nil {
		var ret NamespaceMemberRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNamespaceMemberRequest) GetRoleOk() (*NamespaceMemberRole, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *UpdateNamespaceMemberRequest) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given NamespaceMemberRole and assigns it to the Role field.
func (o *UpdateNamespaceMemberRequest) SetRole(v NamespaceMemberRole) {
	o.Role = &v
}

func (o UpdateNamespaceMemberRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateNamespaceMemberRequest struct {
	value *UpdateNamespaceMemberRequest
	isSet bool
}

func (v NullableUpdateNamespaceMemberRequest) Get() *UpdateNamespaceMemberRequest {
	return v.value
}

func (v *NullableUpdateNamespaceMemberRequest) Set(val *UpdateNamespaceMemberRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNamespaceMemberRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNamespaceMemberRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNamespaceMemberRequest(val *UpdateNamespaceMemberRequest) *NullableUpdateNamespaceMemberRequest {
	return &NullableUpdateNamespaceMemberRequest{value: val, isSet: true}
}

func (v NullableUpdateNamespaceMemberRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNamespaceMemberRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


